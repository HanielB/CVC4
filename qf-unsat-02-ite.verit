(set .c1 (input :conclusion ((= f1 f2))))
(set .c2 (input :conclusion ((=> (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3)))))
(set .c3 (input :conclusion ((p f1))))
(set .c4 (input :conclusion ((not (p f3)))))
(set .c5 (connective_equiv :conclusion ((= (=> (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3)) (=> (p f1) (=> (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3)))))))
(set .c6 (equiv_pos2 :conclusion ((not (= (=> (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3)) (=> (p f1) (=> (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3))))) (not (=> (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3))) (=> (p f1) (=> (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3))))))
(set .c7 (th_resolution :clauses (.c2 .c5 .c6) :conclusion ((=> (p f1) (=> (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3))))))
(set .c8 (connective_equiv :conclusion ((= (=> (p f1) (=> (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3))) (=> (and (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3)))) (p f3))))))
(set .c9 (equiv_pos2 :conclusion ((not (= (=> (p f1) (=> (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3))) (=> (and (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3)))) (p f3)))) (not (=> (p f1) (=> (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3))) (p f3)))) (=> (and (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3)))) (p f3)))))
(set .c10 (th_resolution :clauses (.c7 .c8 .c9) :conclusion ((=> (and (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3)))) (p f3)))))
(set .c11 (ite_intro :conclusion ((= (=> (and (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3)))) (p f3)) (and (=> (and (p f1) (or (= f1 f2) (not (= f3 (ite (p f1) f4 f2))))) (p f3)) (ite (p f1) (= f4 (ite (p f1) f4 f2)) (= f2 (ite (p f1) f4 f2))))))))
(set .c12 (equiv_pos2 :conclusion ((not (= (=> (and (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3)))) (p f3)) (and (=> (and (p f1) (or (= f1 f2) (not (= f3 (ite (p f1) f4 f2))))) (p f3)) (ite (p f1) (= f4 (ite (p f1) f4 f2)) (= f2 (ite (p f1) f4 f2)))))) (not (=> (and (p f1) (or (= f1 f2) (not (= (ite (p f1) f4 f2) f3)))) (p f3))) (and (=> (and (p f1) (or (= f1 f2) (not (= f3 (ite (p f1) f4 f2))))) (p f3)) (ite (p f1) (= f4 (ite (p f1) f4 f2)) (= f2 (ite (p f1) f4 f2)))))))
(set .c13 (th_resolution :clauses (.c10 .c11 .c12) :conclusion ((and (=> (and (p f1) (or (= f1 f2) (not (= f3 (ite (p f1) f4 f2))))) (p f3)) (ite (p f1) (= f4 (ite (p f1) f4 f2)) (= f2 (ite (p f1) f4 f2)))))))
(set .c14 (and :clauses (.c13) :conclusion ((=> (and (p f1) (or (= f1 f2) (not (= f3 (ite (p f1) f4 f2))))) (p f3)))))
(set .c15 (or_neg :conclusion ((or (= f1 f2) (not (= f3 (ite (p f1) f4 f2)))) (not (= f1 f2)))))
(set .c16 (and_neg :conclusion ((and (p f1) (or (= f1 f2) (not (= f3 (ite (p f1) f4 f2))))) (not (p f1)) (not (or (= f1 f2) (not (= f3 (ite (p f1) f4 f2))))))))
(set .c17 (implies :clauses (.c14) :conclusion ((not (and (p f1) (or (= f1 f2) (not (= f3 (ite (p f1) f4 f2)))))) (p f3))))
(set .c18 (resolution :clauses (.c15 .c1) :conclusion ((or (= f1 f2) (not (= f3 (ite (p f1) f4 f2)))))))
(set .c19 (resolution :clauses (.c16 .c18) :conclusion ((and (p f1) (or (= f1 f2) (not (= f3 (ite (p f1) f4 f2))))) (not (p f1)))))
(set .c20 (resolution :clauses (.c19 .c3) :conclusion ((and (p f1) (or (= f1 f2) (not (= f3 (ite (p f1) f4 f2))))))))
(set .c21 (resolution :clauses (.c17 .c4 .c20) :conclusion ()))
