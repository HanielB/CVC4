/*********************                                                        */
/*! \file lean_rules.h
 ** \verbatim
 ** Top contributors (to current version):
 **   Scott Viteri
 ** This file is part of the CVC4 project.
 ** Copyright (c) 2009-2021 by the authors listed in the file AUTHORS
 ** in the top-level source directory) and their institutional affiliations.
 ** All rights reserved.  See the file COPYING in the top-level source
 ** directory for licensing information.\endverbatim
 **
 ** \brief The module for printing Lean proof nodes
 **/

#include "cvc5_private.h"

#ifndef CVC4__PROOF_LEAN_RULES_H
#define CVC4__PROOF_LEAN_RULES_H

#include <iostream>

#include "expr/node.h"

namespace cvc5 {
namespace proof {

enum class LeanRule : uint32_t
{
  // base
  SCOPE,
  CL_ASSUME,
  CL_OR,
  TH_ASSUME,
  LIFT_N_OR_TO_IMP,
  LIFT_N_OR_TO_NEG,
  // boolean
  R0,
  R0_PARTIAL,
  R1,
  R1_PARTIAL,
  FACTORING,
  REORDER,
  EQ_RESOLVE,
  MODUS_PONENS,
  NOT_NOT_ELIM,
  CONTRADICTION,
  // cnf
  AND_ELIM,
  AND_INTRO,
  AND_INTRO_PARTIAL,
  NOT_OR_ELIM,
  IMPLIES_ELIM,
  NOT_IMPLIES1,
  NOT_IMPLIES2,
  EQUIV_ELIM1,
  EQUIV_ELIM2,
  NOT_EQUIV_ELIM1,
  NOT_EQUIV_ELIM2,
  XOR_ELIM1,
  XOR_ELIM2,
  NOT_XOR_ELIM1,
  NOT_XOR_ELIM2,
  ITE_ELIM1,
  ITE_ELIM2,
  NOT_ITE_ELIM1,
  NOT_ITE_ELIM2,
  NOT_AND,
  // tseitin
  CNF_AND_POS,
  CNF_AND_NEG,
  CNF_OR_POS,
  CNF_OR_NEG,
  CNF_IMPLIES_POS,
  CNF_IMPLIES_NEG1,
  CNF_IMPLIES_NEG2,
  CNF_EQUIV_POS1,
  CNF_EQUIV_POS2,
  CNF_EQUIV_NEG1,
  CNF_EQUIV_NEG2,
  CNF_XOR_POS1,
  CNF_XOR_POS2,
  CNF_XOR_NEG1,
  CNF_XOR_NEG2,
  CNF_ITE_POS1,
  CNF_ITE_POS2,
  CNF_ITE_POS3,
  CNF_ITE_NEG1,
  CNF_ITE_NEG2,
  CNF_ITE_NEG3,
  // euf
  CONG,
  CONG_PARTIAL,
  REFL,
  REFL_PARTIAL,
  TRANS,
  TRANS_PARTIAL,
  SYMM,
  NEG_SYMM,
  TRUE_INTRO,
  TRUE_ELIM,
  FALSE_INTRO,
  FALSE_ELIM,

  // holes
  TRUST,
  TH_TRUST,
  TH_TRUST_VALID,
  // strings
  STRING_LENGTH_POS,
  // arith
  ARITH_SUM_UB,
  ARITH_MULT_POS,
  ARITH_MULT_NEG,
  EVALUATE,

 SUBS,
 REWRITE,
 MACRO_SR_EQ_INTRO,
 MACRO_SR_PRED_INTRO,
 MACRO_SR_PRED_ELIM,
 MACRO_SR_PRED_TRANSFORM,
 DSL_REWRITE,
 REMOVE_TERM_FORMULA_AXIOM,
 THEORY_LEMMA,
 PREPROCESS_LEMMA,
 THEORY_PREPROCESS,
 THEORY_PREPROCESS_LEMMA,
 THEORY_EXPAND_DEF,
 WITNESS_AXIOM,
 TRUST_REWRITE,
 TRUST_SUBS,
 TRUST_SUBS_MAP,
 SAT_REFUTATION,
 MACRO_RESOLUTION,
 MACRO_RESOLUTION_TRUST,
 SPLIT,
 HO_APP_ENCODE,
 HO_CONG,
 ARRAYS_READ_OVER_WRITE,
 ARRAYS_READ_OVER_WRITE_CONTRA,
 ARRAYS_READ_OVER_WRITE_1,
 ARRAYS_EXT,
 ARRAYS_TRUST,
 BV_BITBLAST,
 BV_BITBLAST_CONST,
 BV_BITBLAST_VAR,
 BV_BITBLAST_EQUAL,
 BV_BITBLAST_ULT,
 BV_BITBLAST_ULE,
 BV_BITBLAST_UGT,
 BV_BITBLAST_UGE,
 BV_BITBLAST_SLT,
 BV_BITBLAST_SLE,
 BV_BITBLAST_SGT,
 BV_BITBLAST_SGE,
 BV_BITBLAST_NOT,
 BV_BITBLAST_CONCAT,
 BV_BITBLAST_AND,
 BV_BITBLAST_OR,
 BV_BITBLAST_XOR,
 BV_BITBLAST_XNOR,
 BV_BITBLAST_NAND,
 BV_BITBLAST_NOR,
 BV_BITBLAST_COMP,
 BV_BITBLAST_MULT,
 BV_BITBLAST_PLUS,
 BV_BITBLAST_SUB,
 BV_BITBLAST_NEG,
 BV_BITBLAST_UDIV,
 BV_BITBLAST_UREM,
 BV_BITBLAST_SDIV,
 BV_BITBLAST_SREM,
 BV_BITBLAST_SMOD,
 BV_BITBLAST_SHL,
 BV_BITBLAST_LSHR,
 BV_BITBLAST_ASHR,
 BV_BITBLAST_ULTBV,
 BV_BITBLAST_SLTBV,
 BV_BITBLAST_ITE,
 BV_BITBLAST_EXTRACT,
 BV_BITBLAST_REPEAT,
 BV_BITBLAST_ZERO_EXTEND,
 BV_BITBLAST_SIGN_EXTEND,
 BV_BITBLAST_ROTATE_RIGHT,
 BV_BITBLAST_ROTATE_LEFT,
 BV_EAGER_ATOM,
 DT_UNIF,
 DT_INST,
 DT_COLLAPSE,
 DT_SPLIT,
 DT_CLASH,
 DT_TRUST,
 SKOLEM_INTRO,
 EXISTS_INTRO,
 SKOLEMIZE,
 INSTANTIATE,
 ALPHA_EQUIV,
 CONCAT_EQ,
 CONCAT_UNIFY,
 CONCAT_CONFLICT,
 CONCAT_SPLIT,
 CONCAT_CSPLIT,
 CONCAT_LPROP,
 CONCAT_CPROP,
 STRING_DECOMPOSE,
 STRING_LENGTH_NON_EMPTY,
 STRING_REDUCTION,
 STRING_EAGER_REDUCTION,
 RE_INTER,
 RE_UNFOLD_POS,
 RE_UNFOLD_NEG,
 RE_UNFOLD_NEG_CONCAT_FIXED,
 RE_ELIM,
 STRING_CODE_INJ,
 STRING_SEQ_UNIT_INJ,
 STRING_TRUST,
 MACRO_ARITH_SCALE_SUM_UB,
 INT_TIGHT_UB,
 INT_TIGHT_LB,
 ARITH_TRICHOTOMY,
 ARITH_OP_ELIM_AXIOM,
 INT_TRUST,
 ARITH_MULT_SIGN,
 ARITH_MULT_TANGENT,
 ARITH_TRANS_PI,
 ARITH_TRANS_EXP_NEG,
 ARITH_TRANS_EXP_POSITIVITY,
 ARITH_TRANS_EXP_SUPER_LIN,
 ARITH_TRANS_EXP_ZERO,
 ARITH_TRANS_EXP_APPROX_ABOVE_NEG,
 ARITH_TRANS_EXP_APPROX_ABOVE_POS,
 ARITH_TRANS_EXP_APPROX_BELOW,
 ARITH_TRANS_SINE_BOUNDS,
 ARITH_TRANS_SINE_SHIFT,
 ARITH_TRANS_SINE_SYMMETRY,
 ARITH_TRANS_SINE_TANGENT_ZERO,
 ARITH_TRANS_SINE_TANGENT_PI,
 ARITH_TRANS_SINE_APPROX_ABOVE_NEG,
 ARITH_TRANS_SINE_APPROX_ABOVE_POS,
 ARITH_TRANS_SINE_APPROX_BELOW_NEG,
 ARITH_TRANS_SINE_APPROX_BELOW_POS,
 ARITH_NL_CAD_DIRECT,
 ARITH_NL_CAD_RECURSIVE,
 LFSC_RULE,
 LEAN_RULE,
 VERIT_RULE,
  UNKNOWN
};

/**
 * Converts a Lean rule to a string.
 * @param id The Lean rule
 * @return The name of the Lean rule
 */
const char* toString(LeanRule id);

/**
 * Writes a Lean rule name to a stream.
 *
 * @param out The stream to write to
 * @param id The Lean rule to write to the stream
 * @return The stream
 */
std::ostream& operator<<(std::ostream& out, LeanRule id);

/** Convert a CVC4 Node holding an id to the corresponding LeanRule */
LeanRule getLeanRule(Node n);

}  // namespace proof
}  // namespace cvc5

#endif /* CVC4__PROOF_LEAN_RULES_H */
