(set .c1 (input :conclusion ((not (= f1 f2)))))
(set .c2 (input :conclusion ((and (p f1) (or (= f1 f2) (distinct f3 f4 f2)) (p f3)))))
(set .c3 (input :conclusion ((= f3 f4))))
(set .c4 (distinct_elim :conclusion ((= (distinct f3 f4 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))))))
(set .c5 (cong :clauses (.c4) :conclusion ((= (or (= f1 f2) (distinct f3 f4 f2)) (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4))))))))
(set .c6 (cong :clauses (.c5) :conclusion ((= (and (p f1) (or (= f1 f2) (distinct f3 f4 f2)) (p f3)) (and (p f1) (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (p f3))))))
(set .c7 (equiv_pos2 :conclusion ((not (= (and (p f1) (or (= f1 f2) (distinct f3 f4 f2)) (p f3)) (and (p f1) (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (p f3)))) (not (and (p f1) (or (= f1 f2) (distinct f3 f4 f2)) (p f3))) (and (p f1) (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (p f3)))))
(set .c8 (th_resolution :clauses (.c2 .c6 .c7) :conclusion ((and (p f1) (or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (p f3)))))
(set .c9 (and :clauses (.c8) :conclusion ((or (= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))))))
(set .c10 (and_pos :conclusion ((not (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4)))) (not (= f3 f4)))))
(set .c11 (or :clauses (.c9) :conclusion ((= f1 f2) (and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4))))))
(set .c12 (resolution :clauses (.c11 .c1) :conclusion ((and (not (= f3 f4)) (not (= f2 f3)) (not (= f2 f4))))))
(set .c13 (resolution :clauses (.c10 .c12 .c3) :conclusion ()))
