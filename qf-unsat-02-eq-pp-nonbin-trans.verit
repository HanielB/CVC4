(set .c1 (input :conclusion ((= (g c) d))))
(set .c2 (input :conclusion ((= d a))))
(set .c3 (input :conclusion ((not (= (f a b) (f (g c) b))))))
(set .c4 (eq_congruent :conclusion ((not (= (g c) a)) (not (= b b)) (= (f a b) (f (g c) b)))))
(set .c5 (eq_transitive :conclusion ((not (= (g c) d)) (not (= d a)) (= (g c) a))))
(set .c6 (th_resolution :clauses (.c4 .c5) :conclusion ((not (= b b)) (= (f a b) (f (g c) b)) (not (= (g c) d)) (not (= d a)))))
(set .c7 (eq_reflexive :conclusion ((= b b))))
(set .c8 (th_resolution :clauses (.c6 .c7) :conclusion ((= (f a b) (f (g c) b)) (not (= (g c) d)) (not (= d a)))))
(set .c9 (resolution :clauses (.c8 .c1 .c2 .c3) :conclusion ()))
